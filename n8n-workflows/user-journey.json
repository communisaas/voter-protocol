{
  "name": "User Journey",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "user/action",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "User Action",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "jsCode": "// Complete user journey orchestration\nconst { action, userAddress, data } = $json;\n\n// Map user actions to workflow steps\nconst actionMap = {\n  'register': ['identity_verification', 'initial_reputation'],\n  'submit_template': ['identity_check', 'template_verification', 'consensus_voting'],\n  'send_message': ['cwc_verification', 'mint_record', 'calculate_reward'],\n  'challenge_action': ['stake_validation', 'challenge_creation'],\n  'vote_challenge': ['stake_validation', 'vote_recording'],\n  'claim_reward': ['eligibility_check', 'reward_distribution']\n};\n\nconst steps = actionMap[action] || [];\n\nreturn {\n  action,\n  userAddress,\n  data,\n  requiredSteps: steps,\n  sessionId: `session_${Date.now()}_${userAddress.slice(-6)}`,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse_action",
      "name": "Parse Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.requiredSteps[0] }}",
        "rules": {
          "rules": [
            {
              "value2": "identity_verification",
              "output": 0
            },
            {
              "value2": "identity_check",
              "output": 1
            },
            {
              "value2": "template_verification",
              "output": 2
            },
            {
              "value2": "cwc_verification",
              "output": 3
            },
            {
              "value2": "stake_validation",
              "output": 4
            }
          ]
        },
        "fallbackOutput": 5
      },
      "id": "route_first_step",
      "name": "Route First Step",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_INSTANCE_URL }}/webhook/identity/verify",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userAddress",
              "value": "={{ $json.userAddress }}"
            },
            {
              "name": "zkProof",
              "value": "={{ $json.data.zkProof }}"
            },
            {
              "name": "publicInputs",
              "value": "={{ $json.data.publicInputs }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "call_identity",
      "name": "Verify Identity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  user_address,\n  kyc_status,\n  zk_status,\n  trust_score,\n  permissions\nFROM user_identities\nWHERE user_address = '{{ $json.userAddress }}'\nLIMIT 1",
        "options": {}
      },
      "id": "check_identity",
      "name": "Check Identity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [850, 300],
      "credentials": {
        "postgres": {
          "id": "postgres_credentials",
          "name": "Postgres"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_INSTANCE_URL }}/webhook/coordinate",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "operation",
              "value": "verify"
            },
            {
              "name": "template",
              "value": "={{ $json.data.template }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "verify_template",
      "name": "Verify Template",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_INSTANCE_URL }}/webhook/cwc/verify",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userAddress",
              "value": "={{ $json.userAddress }}"
            },
            {
              "name": "templateId",
              "value": "={{ $json.data.templateId }}"
            },
            {
              "name": "recipientOffice",
              "value": "={{ $json.data.recipientOffice }}"
            },
            {
              "name": "messageBody",
              "value": "={{ $json.data.messageBody }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "send_cwc",
      "name": "Send via CWC",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  balance,\n  staked_amount,\n  available_balance\nFROM user_balances\nWHERE user_address = '{{ $json.userAddress }}'\nLIMIT 1",
        "options": {}
      },
      "id": "check_balance",
      "name": "Check Balance",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [850, 600],
      "credentials": {
        "postgres": {
          "id": "postgres_credentials",
          "name": "Postgres"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process step results and determine next action\nconst stepResult = $input.first().json;\nconst journey = $('parse_action').first().json;\n\n// Check if current step succeeded\nconst stepSuccess = stepResult.success || stepResult.verified || stepResult.approved;\n\nif (!stepSuccess) {\n  return {\n    success: false,\n    action: journey.action,\n    failedAt: journey.requiredSteps[0],\n    error: stepResult.error || 'Step failed',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Remove completed step and check for more\nconst remainingSteps = journey.requiredSteps.slice(1);\n\nif (remainingSteps.length === 0) {\n  // Journey complete\n  return {\n    success: true,\n    action: journey.action,\n    userAddress: journey.userAddress,\n    completedSteps: journey.requiredSteps,\n    result: stepResult,\n    rewards: calculateRewards(journey.action, stepResult),\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Continue to next step\nreturn {\n  continueJourney: true,\n  userAddress: journey.userAddress,\n  data: journey.data,\n  requiredSteps: remainingSteps,\n  completedStep: journey.requiredSteps[0],\n  sessionId: journey.sessionId\n};\n\nfunction calculateRewards(action, result) {\n  const baseRewards = {\n    'register': { voter_tokens: 10, reputation: 10 },\n    'submit_template': { voter_tokens: 5, reputation: 5 },\n    'send_message': { voter_tokens: result.reward || 1, reputation: 2 },\n    'challenge_action': { voter_tokens: 0, reputation: 1 },\n    'vote_challenge': { voter_tokens: 0, reputation: 1 },\n    'claim_reward': { voter_tokens: result.reward || 0, reputation: 0 }\n  };\n  return baseRewards[action] || { voter_tokens: 0, reputation: 0 };\n}"
      },
      "id": "process_step",
      "name": "Process Step Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.continueJourney }}",
              "rightValue": true,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "check_continue",
      "name": "Continue?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "nextStep",
              "value": "={{ $json.requiredSteps[0] }}"
            }
          ]
        }
      },
      "id": "prepare_next",
      "name": "Prepare Next Step",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Log journey completion and trigger rewards\nconst result = $json;\n\n// Record journey completion\nconst journeyRecord = {\n  user_address: result.userAddress,\n  action: result.action,\n  success: result.success,\n  completed_steps: result.completedSteps,\n  rewards_earned: result.rewards,\n  completion_time: result.timestamp\n};\n\n// Prepare blockchain transactions if needed\nconst transactions = [];\n\nif (result.rewards.voter_tokens > 0) {\n  transactions.push({\n    type: 'distribute_reward',\n    recipient: result.userAddress,\n    amount: result.rewards.voter_tokens\n  });\n}\n\nif (result.rewards.reputation > 0) {\n  transactions.push({\n    type: 'update_reputation',\n    user: result.userAddress,\n    score_increase: result.rewards.reputation\n  });\n}\n\nreturn {\n  journeyComplete: true,\n  ...journeyRecord,\n  pendingTransactions: transactions\n};"
      },
      "id": "finalize_journey",
      "name": "Finalize Journey",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 500]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "user_journeys",
        "columns": "user_address,action,success,completed_steps,rewards_earned,completion_time",
        "options": {
          "returnFields": "id"
        }
      },
      "id": "save_journey",
      "name": "Save Journey",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1650, 500],
      "credentials": {
        "postgres": {
          "id": "postgres_credentials",
          "name": "Postgres"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error",
              "value": "No valid workflow step identified"
            }
          ],
          "boolean": [
            {
              "name": "success",
              "value": false
            }
          ]
        }
      },
      "id": "error_response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [850, 700]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond",
      "name": "Return Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1850, 400]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "parse_action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_action": {
      "main": [
        [
          {
            "node": "route_first_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route_first_step": {
      "main": [
        [
          {
            "node": "call_identity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check_identity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "verify_template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "send_cwc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check_balance",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "call_identity": {
      "main": [
        [
          {
            "node": "process_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_identity": {
      "main": [
        [
          {
            "node": "process_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verify_template": {
      "main": [
        [
          {
            "node": "process_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_cwc": {
      "main": [
        [
          {
            "node": "process_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_balance": {
      "main": [
        [
          {
            "node": "process_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_step": {
      "main": [
        [
          {
            "node": "check_continue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_continue": {
      "main": [
        [
          {
            "node": "prepare_next",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "finalize_journey",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_next": {
      "main": [
        [
          {
            "node": "route_first_step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "finalize_journey": {
      "main": [
        [
          {
            "node": "save_journey",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save_journey": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error_response": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}