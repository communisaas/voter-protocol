{
  "name": "Blockchain Operations",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "blockchain/:operation",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Blockchain Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        400
      ]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.operation }}",
        "rules": {
          "rules": [
            {
              "value2": "mint_record",
              "output": 0
            },
            {
              "value2": "verify_action",
              "output": 1
            },
            {
              "value2": "update_reputation",
              "output": 2
            },
            {
              "value2": "distribute_reward",
              "output": 3
            },
            {
              "value2": "query_balance",
              "output": 4
            }
          ]
        },
        "fallbackOutput": 5
      },
      "id": "operation_router",
      "name": "Route Operation",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        450,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Mint VOTER Record NFT\nconst { userAddress, actionType, metadata } = $json;\n\n// Prepare contract call\nconst contractCall = {\n  to: process.env.VOTER_REGISTRY_ADDRESS,\n  data: web3.eth.abi.encodeFunctionCall({\n    name: 'mintRecord',\n    type: 'function',\n    inputs: [\n      { type: 'address', name: 'recipient' },\n      { type: 'string', name: 'actionType' },\n      { type: 'string', name: 'metadataURI' }\n    ]\n  }, [userAddress, actionType, metadata.ipfsHash || ''])\n};\n\nreturn {\n  operation: 'mint_record',\n  contract: 'VOTERRegistry',\n  method: 'mintRecord',\n  params: contractCall,\n  gasEstimate: 150000,\n  userAddress,\n  actionType\n};"
      },
      "id": "mint_record",
      "name": "Mint Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verify civic action on-chain\nconst { actionId, verifierSignatures, timestamp } = $json;\n\n// Multi-sig verification\nconst contractCall = {\n  to: process.env.ACTION_VERIFIER_ADDRESS,\n  data: web3.eth.abi.encodeFunctionCall({\n    name: 'verifyAction',\n    type: 'function',\n    inputs: [\n      { type: 'bytes32', name: 'actionId' },\n      { type: 'bytes[]', name: 'signatures' },\n      { type: 'uint256', name: 'timestamp' }\n    ]\n  }, [actionId, verifierSignatures, timestamp])\n};\n\nreturn {\n  operation: 'verify_action',\n  contract: 'ActionVerifier',\n  method: 'verifyAction',\n  params: contractCall,\n  gasEstimate: 100000,\n  actionId\n};"
      },
      "id": "verify_action",
      "name": "Verify Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        250
      ]
    },
    {
      "parameters": {
        "jsCode": "// Update ERC-8004 reputation\nconst { userAddress, newScore, reason } = $json;\n\nconst contractCall = {\n  to: process.env.REPUTATION_REGISTRY_ADDRESS,\n  data: web3.eth.abi.encodeFunctionCall({\n    name: 'updateReputation',\n    type: 'function',\n    inputs: [\n      { type: 'address', name: 'user' },\n      { type: 'uint256', name: 'score' },\n      { type: 'string', name: 'reason' }\n    ]\n  }, [userAddress, newScore, reason])\n};\n\nreturn {\n  operation: 'update_reputation',\n  contract: 'ReputationRegistry',\n  method: 'updateReputation',\n  params: contractCall,\n  gasEstimate: 80000,\n  userAddress,\n  newScore\n};"
      },
      "id": "update_reputation",
      "name": "Update Reputation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Distribute VOTER token rewards\nconst { recipients, amounts, actionIds } = $json;\n\n// Batch reward distribution\nconst contractCall = {\n  to: process.env.VOTER_TOKEN_ADDRESS,\n  data: web3.eth.abi.encodeFunctionCall({\n    name: 'batchDistributeRewards',\n    type: 'function',\n    inputs: [\n      { type: 'address[]', name: 'recipients' },\n      { type: 'uint256[]', name: 'amounts' },\n      { type: 'bytes32[]', name: 'actionIds' }\n    ]\n  }, [recipients, amounts, actionIds])\n};\n\nreturn {\n  operation: 'distribute_reward',\n  contract: 'VOTERToken',\n  method: 'batchDistributeRewards',\n  params: contractCall,\n  gasEstimate: 50000 * recipients.length,\n  recipientCount: recipients.length,\n  totalReward: amounts.reduce((a, b) => a + b, 0)\n};"
      },
      "id": "distribute_reward",
      "name": "Distribute Reward",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        550
      ]
    },
    {
      "parameters": {
        "jsCode": "// Query token balance\nconst { userAddress } = $json;\n\nconst contractCall = {\n  to: process.env.VOTER_TOKEN_ADDRESS,\n  data: web3.eth.abi.encodeFunctionCall({\n    name: 'balanceOf',\n    type: 'function',\n    inputs: [\n      { type: 'address', name: 'account' }\n    ]\n  }, [userAddress])\n};\n\nreturn {\n  operation: 'query_balance',\n  contract: 'VOTERToken',\n  method: 'balanceOf',\n  params: contractCall,\n  view: true, // Read-only call\n  userAddress\n};"
      },
      "id": "query_balance",
      "name": "Query Balance",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        700
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.RONIN_RPC_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "jsonrpc",
              "value": "2.0"
            },
            {
              "name": "id",
              "value": "={{ Date.now() }}"
            },
            {
              "name": "method",
              "value": "={{ $json.view ? 'eth_call' : 'eth_sendTransaction' }}"
            },
            {
              "name": "params",
              "value": "={{ [$json.params, 'latest'] }}"
            }
          ]
        }
      },
      "id": "execute_call",
      "name": "Execute RPC Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse RPC response\nconst response = $json;\nconst operation = $('webhook_trigger').first().json.operation;\n\nif (response.error) {\n  return {\n    success: false,\n    operation,\n    error: response.error.message,\n    code: response.error.code\n  };\n}\n\n// Decode response based on operation\nlet decoded;\nswitch(operation) {\n  case 'query_balance':\n    // Decode uint256 balance\n    const balanceHex = response.result;\n    const balanceWei = parseInt(balanceHex, 16);\n    decoded = {\n      balance_wei: balanceWei.toString(),\n      balance_ether: (balanceWei / 1e18).toFixed(6),\n      balance_voter: (balanceWei / 1e18).toFixed(2)\n    };\n    break;\n    \n  case 'mint_record':\n  case 'verify_action':\n  case 'update_reputation':\n  case 'distribute_reward':\n    // Transaction hash for state-changing operations\n    decoded = {\n      tx_hash: response.result,\n      status: 'pending',\n      explorer_url: `https://explorer.roninchain.com/tx/${response.result}`\n    };\n    break;\n    \n  default:\n    decoded = response.result;\n}\n\nreturn {\n  success: true,\n  operation,\n  result: decoded,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse_response",
      "name": "Parse Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        400
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error",
              "value": "Invalid operation requested"
            }
          ],
          "boolean": [
            {
              "name": "success",
              "value": false
            }
          ]
        }
      },
      "id": "invalid_operation",
      "name": "Invalid Operation",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        650,
        850
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond",
      "name": "Return Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        400
      ]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "operation_router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "operation_router": {
      "main": [
        [
          {
            "node": "mint_record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "verify_action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update_reputation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "distribute_reward",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "query_balance",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "invalid_operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mint_record": {
      "main": [
        [
          {
            "node": "execute_call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verify_action": {
      "main": [
        [
          {
            "node": "execute_call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_reputation": {
      "main": [
        [
          {
            "node": "execute_call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "distribute_reward": {
      "main": [
        [
          {
            "node": "execute_call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "query_balance": {
      "main": [
        [
          {
            "node": "execute_call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "execute_call": {
      "main": [
        [
          {
            "node": "parse_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_response": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "invalid_operation": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}
