{
  "name": "Template Verifier",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "verify",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Verify Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.template.subject }}",
              "operation": "isNotEmpty"
            },
            {
              "leftValue": "={{ $json.template.message_body.length }}",
              "operation": "larger",
              "rightValue": 50
            },
            {
              "leftValue": "={{ $json.template.message_body.length }}",
              "operation": "smaller",
              "rightValue": 5000
            }
          ]
        }
      },
      "id": "validate_basic",
      "name": "Basic Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $credentials.apiKey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4-turbo-preview"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 500
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are a nonpartisan civic message reviewer. Analyze congressional messages for clarity, respect, and democratic norms. Respond ONLY with valid JSON.\"}, {\"role\": \"user\", \"content\": \"Analyze this message:\\n\\nSubject: {{ $json.template.subject }}\\nBody: {{ $json.template.message_body }}\\n\\nCheck for:\\n1. Grammar and clarity\\n2. Respectful tone\\n3. Clear ask or position\\n4. No threats or hate speech\\n5. Factual claims (if any)\\n\\nRespond with JSON:\\n{\\\"approved\\\": boolean, \\\"severity\\\": 1-10, \\\"issues\\\": [], \\\"suggestions\\\": {}}\"}]"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "call_openai",
      "name": "AI Review",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "openai_api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse OpenAI response and make decision\nconst template = $('webhook_trigger').first().json.template;\nlet aiResult;\n\ntry {\n  const response = $input.first().json;\n  const content = response.choices[0].message.content;\n  aiResult = JSON.parse(content);\n} catch (error) {\n  console.error('Failed to parse AI response:', error);\n  aiResult = {\n    approved: false,\n    severity: 10,\n    issues: ['Failed to parse AI response'],\n    suggestions: {}\n  };\n}\n\n// Auto-approve threshold\nconst autoApproveThreshold = 3;\nconst needsReview = aiResult.severity > autoApproveThreshold;\n\nreturn {\n  templateId: template.id,\n  approved: aiResult.approved && !needsReview,\n  severity: aiResult.severity || 5,\n  decision: needsReview ? 'needs_review' : (aiResult.approved ? 'approved' : 'rejected'),\n  issues: aiResult.issues || [],\n  suggestions: aiResult.suggestions || {},\n  confidence: Math.max(0.5, 1 - (aiResult.severity / 20)),\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse_result",
      "name": "Parse Decision",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error",
              "value": "Template validation failed - missing required fields"
            }
          ],
          "boolean": [
            {
              "name": "approved",
              "value": false
            }
          ],
          "number": [
            {
              "name": "severity",
              "value": 10
            }
          ]
        }
      },
      "id": "reject_invalid",
      "name": "Reject Invalid",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [650, 500]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond",
      "name": "Return Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 400]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "validate_basic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_basic": {
      "main": [
        [
          {
            "node": "call_openai",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reject_invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "call_openai": {
      "main": [
        [
          {
            "node": "parse_result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_result": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reject_invalid": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}