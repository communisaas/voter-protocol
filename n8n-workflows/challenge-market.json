{
  "name": "Challenge Market",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "challenge/:action",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Challenge Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.COMMUNIQUE_API_URL }}/api/voter/challenge",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "={{ $params.action }}"
            },
            {
              "name": "challengerId", 
              "value": "={{ $json.challengerId }}"
            },
            {
              "name": "defenderId",
              "value": "={{ $json.defenderId }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description", 
              "value": "={{ $json.description }}"
            },
            {
              "name": "evidence",
              "value": "={{ $json.evidence }}"
            },
            {
              "name": "stakeAmount",
              "value": "={{ $json.stakeAmount }}"
            },
            {
              "name": "category",
              "value": "={{ $json.category }}"
            },
            {
              "name": "challengeId",
              "value": "={{ $json.challengeId }}"
            },
            {
              "name": "userId", 
              "value": "={{ $json.userId }}"
            },
            {
              "name": "vote",
              "value": "={{ $json.vote }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "process_challenge_communique",
      "name": "Process Challenge via Communique",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process Communique challenge response\nconst response = $json;\nconst action = $params.action;\n\nif (!response.success) {\n  return {\n    success: false,\n    error: response.error || `Challenge ${action} failed via Communique`,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Extract relevant data based on action type\nlet result = {\n  success: true,\n  action: action,\n  timestamp: new Date().toISOString(),\n  message: response.message\n};\n\nswitch (action) {\n  case 'create':\n    result = {\n      ...result,\n      challengeId: response.challengeId,\n      claimHash: response.claimHash,\n      stake: response.stake,\n      influence: response.influence,\n      status: response.status,\n      votingDeadline: response.votingDeadline\n    };\n    break;\n    \n  case 'vote':\n    result = {\n      ...result,\n      challengeId: response.challengeId,\n      voter: response.voter,\n      vote: response.vote,\n      stake: response.stake,\n      votingPower: response.votingPower\n    };\n    break;\n    \n  case 'resolve':\n    result = {\n      ...result,\n      challengeId: response.challengeId,\n      status: response.status,\n      resolution: response.resolution,\n      winner: response.winner,\n      supportPower: response.supportPower,\n      opposePower: response.opposePower,\n      totalVoters: response.totalVoters,\n      rewards: response.rewards,\n      resolved_at: response.resolved_at\n    };\n    break;\n    \n  case 'claim':\n    result = {\n      ...result,\n      challengeId: response.challengeId,\n      userId: response.userId,\n      reward: response.reward,\n      reward_wei: response.reward_wei,\n      claimed_at: response.claimed_at\n    };\n    break;\n    \n  default:\n    result.error = `Unknown action: ${action}`;\n    result.success = false;\n}\n\nreturn result;"
      },
      "id": "process_response",
      "name": "Process Challenge Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "check_success",
      "name": "Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.action }}",
              "rightValue": "claim",
              "operation": "equal"
            }
          ]
        }
      },
      "id": "check_claim_action",
      "name": "Is Claim?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_INSTANCE_URL }}/webhook/blockchain/distribute_reward",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "operation",
              "value": "distribute_reward"
            },
            {
              "name": "recipients",
              "value": "={{ [$json.userId] }}"
            },
            {
              "name": "amounts",
              "value": "={{ [$json.reward_wei] }}"
            },
            {
              "name": "actionIds",
              "value": "={{ [$json.challengeId] }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "trigger_blockchain_reward",
      "name": "Trigger Blockchain Reward",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond",
      "name": "Return Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 400]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "process_challenge_communique",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_challenge_communique": {
      "main": [
        [
          {
            "node": "process_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_response": {
      "main": [
        [
          {
            "node": "check_success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_success": {
      "main": [
        [
          {
            "node": "check_claim_action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_claim_action": {
      "main": [
        [
          {
            "node": "trigger_blockchain_reward",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger_blockchain_reward": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}